-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.
--A1L36 is Add0~1
A1L36_adder_eqn = ( B_d1[0] ) + ( A_d1[0] ) + ( !VCC );
A1L36 = SUM(A1L36_adder_eqn);

--A1L37 is Add0~2
A1L37_adder_eqn = ( B_d1[0] ) + ( A_d1[0] ) + ( !VCC );
A1L37 = CARRY(A1L37_adder_eqn);


--A1L40 is Add0~5
A1L40_adder_eqn = ( A_d1[1] ) + ( B_d1[1] ) + ( A1L37 );
A1L40 = SUM(A1L40_adder_eqn);

--A1L41 is Add0~6
A1L41_adder_eqn = ( A_d1[1] ) + ( B_d1[1] ) + ( A1L37 );
A1L41 = CARRY(A1L41_adder_eqn);


--A1L44 is Add0~9
A1L44_adder_eqn = ( A_d1[2] ) + ( B_d1[2] ) + ( A1L41 );
A1L44 = SUM(A1L44_adder_eqn);

--A1L45 is Add0~10
A1L45_adder_eqn = ( A_d1[2] ) + ( B_d1[2] ) + ( A1L41 );
A1L45 = CARRY(A1L45_adder_eqn);


--A1L48 is Add0~13
A1L48_adder_eqn = ( A_d1[3] ) + ( B_d1[3] ) + ( A1L45 );
A1L48 = SUM(A1L48_adder_eqn);

--A1L49 is Add0~14
A1L49_adder_eqn = ( A_d1[3] ) + ( B_d1[3] ) + ( A1L45 );
A1L49 = CARRY(A1L49_adder_eqn);


--A1L52 is Add0~17
A1L52_adder_eqn = ( A_d1[4] ) + ( B_d1[4] ) + ( A1L49 );
A1L52 = SUM(A1L52_adder_eqn);

--A1L53 is Add0~18
A1L53_adder_eqn = ( A_d1[4] ) + ( B_d1[4] ) + ( A1L49 );
A1L53 = CARRY(A1L53_adder_eqn);


--A1L56 is Add0~21
A1L56_adder_eqn = ( A_d1[5] ) + ( B_d1[5] ) + ( A1L53 );
A1L56 = SUM(A1L56_adder_eqn);

--A1L57 is Add0~22
A1L57_adder_eqn = ( A_d1[5] ) + ( B_d1[5] ) + ( A1L53 );
A1L57 = CARRY(A1L57_adder_eqn);


--A1L60 is Add0~25
A1L60_adder_eqn = ( A_d1[6] ) + ( B_d1[6] ) + ( A1L57 );
A1L60 = SUM(A1L60_adder_eqn);

--A1L61 is Add0~26
A1L61_adder_eqn = ( A_d1[6] ) + ( B_d1[6] ) + ( A1L57 );
A1L61 = CARRY(A1L61_adder_eqn);


--A1L64 is Add0~29
A1L64_adder_eqn = ( A_d1[7] ) + ( B_d1[7] ) + ( A1L61 );
A1L64 = SUM(A1L64_adder_eqn);

--A1L65 is Add0~30
A1L65_adder_eqn = ( A_d1[7] ) + ( B_d1[7] ) + ( A1L61 );
A1L65 = CARRY(A1L65_adder_eqn);


--A1L68 is Add0~33
A1L68_adder_eqn = ( A_d1[8] ) + ( B_d1[8] ) + ( A1L65 );
A1L68 = SUM(A1L68_adder_eqn);

--A1L69 is Add0~34
A1L69_adder_eqn = ( A_d1[8] ) + ( B_d1[8] ) + ( A1L65 );
A1L69 = CARRY(A1L69_adder_eqn);


--A1L72 is Add0~37
A1L72_adder_eqn = ( A_d1[9] ) + ( B_d1[9] ) + ( A1L69 );
A1L72 = SUM(A1L72_adder_eqn);

--A1L73 is Add0~38
A1L73_adder_eqn = ( A_d1[9] ) + ( B_d1[9] ) + ( A1L69 );
A1L73 = CARRY(A1L73_adder_eqn);


--A1L76 is Add0~41
A1L76_adder_eqn = ( A_d1[10] ) + ( B_d1[10] ) + ( A1L73 );
A1L76 = SUM(A1L76_adder_eqn);

--A1L77 is Add0~42
A1L77_adder_eqn = ( A_d1[10] ) + ( B_d1[10] ) + ( A1L73 );
A1L77 = CARRY(A1L77_adder_eqn);


--A1L80 is Add0~45
A1L80_adder_eqn = ( A_d1[11] ) + ( B_d1[11] ) + ( A1L77 );
A1L80 = SUM(A1L80_adder_eqn);

--A1L81 is Add0~46
A1L81_adder_eqn = ( A_d1[11] ) + ( B_d1[11] ) + ( A1L77 );
A1L81 = CARRY(A1L81_adder_eqn);


--A1L84 is Add0~49
A1L84_adder_eqn = ( A_d1[12] ) + ( B_d1[12] ) + ( A1L81 );
A1L84 = SUM(A1L84_adder_eqn);

--A1L85 is Add0~50
A1L85_adder_eqn = ( A_d1[12] ) + ( B_d1[12] ) + ( A1L81 );
A1L85 = CARRY(A1L85_adder_eqn);


--A1L88 is Add0~53
A1L88_adder_eqn = ( A_d1[13] ) + ( B_d1[13] ) + ( A1L85 );
A1L88 = SUM(A1L88_adder_eqn);

--A1L89 is Add0~54
A1L89_adder_eqn = ( A_d1[13] ) + ( B_d1[13] ) + ( A1L85 );
A1L89 = CARRY(A1L89_adder_eqn);


--A1L92 is Add0~57
A1L92_adder_eqn = ( A_d1[14] ) + ( B_d1[14] ) + ( A1L89 );
A1L92 = SUM(A1L92_adder_eqn);

--A1L93 is Add0~58
A1L93_adder_eqn = ( A_d1[14] ) + ( B_d1[14] ) + ( A1L89 );
A1L93 = CARRY(A1L93_adder_eqn);


--A1L96 is Add0~61
A1L96_adder_eqn = ( A_d1[15] ) + ( B_d1[15] ) + ( A1L93 );
A1L96 = SUM(A1L96_adder_eqn);

--A1L97 is Add0~62
A1L97_adder_eqn = ( A_d1[15] ) + ( B_d1[15] ) + ( A1L93 );
A1L97 = CARRY(A1L97_adder_eqn);


--A1L100 is Add0~65
A1L100_adder_eqn = ( GND ) + ( GND ) + ( A1L97 );
A1L100 = SUM(A1L100_adder_eqn);


--result[0] is result[0]
result[0] = OUTPUT(Res_d1[0]);


--result[1] is result[1]
result[1] = OUTPUT(Res_d1[1]);


--result[2] is result[2]
result[2] = OUTPUT(Res_d1[2]);


--result[3] is result[3]
result[3] = OUTPUT(Res_d1[3]);


--result[4] is result[4]
result[4] = OUTPUT(Res_d1[4]);


--result[5] is result[5]
result[5] = OUTPUT(Res_d1[5]);


--result[6] is result[6]
result[6] = OUTPUT(Res_d1[6]);


--result[7] is result[7]
result[7] = OUTPUT(Res_d1[7]);


--result[8] is result[8]
result[8] = OUTPUT(Res_d1[8]);


--result[9] is result[9]
result[9] = OUTPUT(Res_d1[9]);


--result[10] is result[10]
result[10] = OUTPUT(Res_d1[10]);


--result[11] is result[11]
result[11] = OUTPUT(Res_d1[11]);


--result[12] is result[12]
result[12] = OUTPUT(Res_d1[12]);


--result[13] is result[13]
result[13] = OUTPUT(Res_d1[13]);


--result[14] is result[14]
result[14] = OUTPUT(Res_d1[14]);


--result[15] is result[15]
result[15] = OUTPUT(Res_d1[15]);


--result[16] is result[16]
result[16] = OUTPUT(Res_d1[16]);


--Res_d1[0] is Res_d1[0]
--register power-up is low

Res_d1[0] = DFFEAS(A1L36, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[1] is Res_d1[1]
--register power-up is low

Res_d1[1] = DFFEAS(A1L40, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[2] is Res_d1[2]
--register power-up is low

Res_d1[2] = DFFEAS(A1L44, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[3] is Res_d1[3]
--register power-up is low

Res_d1[3] = DFFEAS(A1L48, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[4] is Res_d1[4]
--register power-up is low

Res_d1[4] = DFFEAS(A1L52, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[5] is Res_d1[5]
--register power-up is low

Res_d1[5] = DFFEAS(A1L56, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[6] is Res_d1[6]
--register power-up is low

Res_d1[6] = DFFEAS(A1L60, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[7] is Res_d1[7]
--register power-up is low

Res_d1[7] = DFFEAS(A1L64, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[8] is Res_d1[8]
--register power-up is low

Res_d1[8] = DFFEAS(A1L68, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[9] is Res_d1[9]
--register power-up is low

Res_d1[9] = DFFEAS(A1L72, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[10] is Res_d1[10]
--register power-up is low

Res_d1[10] = DFFEAS(A1L76, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[11] is Res_d1[11]
--register power-up is low

Res_d1[11] = DFFEAS(A1L80, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[12] is Res_d1[12]
--register power-up is low

Res_d1[12] = DFFEAS(A1L84, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[13] is Res_d1[13]
--register power-up is low

Res_d1[13] = DFFEAS(A1L88, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[14] is Res_d1[14]
--register power-up is low

Res_d1[14] = DFFEAS(A1L92, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[15] is Res_d1[15]
--register power-up is low

Res_d1[15] = DFFEAS(A1L96, clk,  ,  ,  ,  ,  ,  ,  );


--Res_d1[16] is Res_d1[16]
--register power-up is low

Res_d1[16] = DFFEAS(A1L100, clk,  ,  ,  ,  ,  ,  ,  );


--clk is clk
clk = INPUT();


--B_d1[0] is B_d1[0]
--register power-up is low

B_d1[0] = DFFEAS(B[0], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[0] is A_d1[0]
--register power-up is low

A_d1[0] = DFFEAS(A[0], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[1] is A_d1[1]
--register power-up is low

A_d1[1] = DFFEAS(A[1], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[1] is B_d1[1]
--register power-up is low

B_d1[1] = DFFEAS(B[1], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[2] is A_d1[2]
--register power-up is low

A_d1[2] = DFFEAS(A[2], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[2] is B_d1[2]
--register power-up is low

B_d1[2] = DFFEAS(B[2], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[3] is A_d1[3]
--register power-up is low

A_d1[3] = DFFEAS(A[3], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[3] is B_d1[3]
--register power-up is low

B_d1[3] = DFFEAS(B[3], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[4] is A_d1[4]
--register power-up is low

A_d1[4] = DFFEAS(A[4], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[4] is B_d1[4]
--register power-up is low

B_d1[4] = DFFEAS(B[4], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[5] is A_d1[5]
--register power-up is low

A_d1[5] = DFFEAS(A[5], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[5] is B_d1[5]
--register power-up is low

B_d1[5] = DFFEAS(B[5], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[6] is A_d1[6]
--register power-up is low

A_d1[6] = DFFEAS(A[6], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[6] is B_d1[6]
--register power-up is low

B_d1[6] = DFFEAS(B[6], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[7] is A_d1[7]
--register power-up is low

A_d1[7] = DFFEAS(A[7], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[7] is B_d1[7]
--register power-up is low

B_d1[7] = DFFEAS(B[7], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[8] is A_d1[8]
--register power-up is low

A_d1[8] = DFFEAS(A[8], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[8] is B_d1[8]
--register power-up is low

B_d1[8] = DFFEAS(B[8], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[9] is A_d1[9]
--register power-up is low

A_d1[9] = DFFEAS(A[9], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[9] is B_d1[9]
--register power-up is low

B_d1[9] = DFFEAS(B[9], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[10] is A_d1[10]
--register power-up is low

A_d1[10] = DFFEAS(A[10], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[10] is B_d1[10]
--register power-up is low

B_d1[10] = DFFEAS(B[10], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[11] is A_d1[11]
--register power-up is low

A_d1[11] = DFFEAS(A[11], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[11] is B_d1[11]
--register power-up is low

B_d1[11] = DFFEAS(B[11], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[12] is A_d1[12]
--register power-up is low

A_d1[12] = DFFEAS(A[12], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[12] is B_d1[12]
--register power-up is low

B_d1[12] = DFFEAS(B[12], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[13] is A_d1[13]
--register power-up is low

A_d1[13] = DFFEAS(A[13], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[13] is B_d1[13]
--register power-up is low

B_d1[13] = DFFEAS(B[13], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[14] is A_d1[14]
--register power-up is low

A_d1[14] = DFFEAS(A[14], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[14] is B_d1[14]
--register power-up is low

B_d1[14] = DFFEAS(B[14], clk,  ,  ,  ,  ,  ,  ,  );


--A_d1[15] is A_d1[15]
--register power-up is low

A_d1[15] = DFFEAS(A[15], clk,  ,  ,  ,  ,  ,  ,  );


--B_d1[15] is B_d1[15]
--register power-up is low

B_d1[15] = DFFEAS(B[15], clk,  ,  ,  ,  ,  ,  ,  );


--B[0] is B[0]
B[0] = INPUT();


--A[0] is A[0]
A[0] = INPUT();


--A[1] is A[1]
A[1] = INPUT();


--B[1] is B[1]
B[1] = INPUT();


--A[2] is A[2]
A[2] = INPUT();


--B[2] is B[2]
B[2] = INPUT();


--A[3] is A[3]
A[3] = INPUT();


--B[3] is B[3]
B[3] = INPUT();


--A[4] is A[4]
A[4] = INPUT();


--B[4] is B[4]
B[4] = INPUT();


--A[5] is A[5]
A[5] = INPUT();


--B[5] is B[5]
B[5] = INPUT();


--A[6] is A[6]
A[6] = INPUT();


--B[6] is B[6]
B[6] = INPUT();


--A[7] is A[7]
A[7] = INPUT();


--B[7] is B[7]
B[7] = INPUT();


--A[8] is A[8]
A[8] = INPUT();


--B[8] is B[8]
B[8] = INPUT();


--A[9] is A[9]
A[9] = INPUT();


--B[9] is B[9]
B[9] = INPUT();


--A[10] is A[10]
A[10] = INPUT();


--B[10] is B[10]
B[10] = INPUT();


--A[11] is A[11]
A[11] = INPUT();


--B[11] is B[11]
B[11] = INPUT();


--A[12] is A[12]
A[12] = INPUT();


--B[12] is B[12]
B[12] = INPUT();


--A[13] is A[13]
A[13] = INPUT();


--B[13] is B[13]
B[13] = INPUT();


--A[14] is A[14]
A[14] = INPUT();


--B[14] is B[14]
B[14] = INPUT();


--A[15] is A[15]
A[15] = INPUT();


--B[15] is B[15]
B[15] = INPUT();


